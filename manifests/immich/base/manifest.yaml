---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-immich-database
  labels:
    app: immich-database
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-immich-database
    volumeAttributes:
      portal: 10.10.30.43:3260
      iqn: iqn.2005-10.org.freenas.ctl:immich-db
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-immich-lb
  labels:
    app: immich
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 600Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-immich-lb
    volumeAttributes:
      server: 10.10.30.43
      share: /mnt/home-lab/containers/immich-library
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-synology-library
  labels:
    app: immich
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 4Ti
  accessModes:
    - ReadOnlyMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: true
    fsType: nfs
    volumeHandle: pv-nfs-synology-library
    volumeAttributes:
      server: 10.10.30.43
      share: /mnt/home-lab/synology/media
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-immich-database
  labels:
    app: immich-database
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-iscsi-immich-database

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-immich-lb
  labels:
    app: immich
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 600Gi
  volumeName: pv-nfs-immich-lb

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-synology-library
  labels:
    app: immich
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadOnlyMany
  resources:
    requests:
      storage: 4Ti
  volumeName: pv-nfs-synology-library

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: immich-secret-env
  namespace: tools
  labels:
    app: immich
spec:
  encryptedData:
    DB_PASSWORD: AgBhBQf9ZeFBJu9mdK4ZJG1TWbwPNlCy5X4+QOzDwudYw8a+/XUjSwU89r6sIP3RBN4jJ0Fg1VS7s9dV7niaPBCTmVtDCEwu/tFoIhCoguRwZRHZ8a2hVAuh7/IdFb497qIU+5h+UdNVb4w3NUVwI9/XlTyslX7lou7011DJZt/nHQSrCfEqlYEtYXxbMWzgGbQGABC9NtXe7er36gX+/rztTHgNShdZS6ehM8pDG5BCEi8+kFAAWE7Jp+Gwmn/QKU3rXIcx3Nae6OOzl8f3vbgMj1iwJZnTBq7PaDE5WqTkq49+Vc4p50uYW9+ie2QDNHXAr2z4Ty09/PpuazFfCN2HhJLx+jCEm0rkZu0GsQbFbc6mymJW6ZX/aaPRfMehAv6pXGUuzPTfcHkjxZAWda6jzEnte9gXIQnNwTINMF0QZLm7EnUuZQRSkY/3Qu0uGGgjx4gUoP+DDZP3EBRKTdtlhcg6BlVEh/8aTYPD5nJbopUevNYrtLVvgwwFRk6wlSwx7a3uGtjr8Y7DlB6/vbEiR5VHIIIsLwzAzdpKuvNGfJWeeb57qoN3k3AqZL8bknPQ0rjc7oEXDCdepDt1y4LEdv9IufIin99Nr0uv7MaGCQp//zcfG6oXJ6VI5BYlNB0R5wDk/1MOG76Y2mQoROXlta+f+fIRbWG5mw1B2w2WtG+HMdn+RcF8oOg4eHV5R3hNJBOPsMN6CAQ=
  template:
    type: Opaque
    metadata:
      labels:
        app: immich
      name: immich-secret-env
      namespace: tools

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: immich-env
  labels:
    app: immich
data:
  DB_DATABASE_NAME: "immich"
  DB_HOSTNAME: "immich-database"
  DB_USERNAME: "immich"
  IMMICH_MACHINE_LEARNING_URL: "http://immich-machine-learning:3003"
  REDIS_HOSTNAME: "redis-hl.tools.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DBINDEX: "0"
  REDIS_PASSWORD: ""
  DISABLE_REVERSE_GEOCODING: "false"
  REVERSE_GEOCODING_PRECISION: "2"
  PUBLIC_LOGIN_PAGE_MESSAGE: ""
  PUID: "1000"
  PGID: "2000"
  IMMICH_CONFIG_FILE: "/opt/immich/immich-config.json"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-database
  labels:
    app: immich-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-database
  template:
    metadata:
      labels:
        app: immich-database
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - gpu-node-1
      # initContainers:
      #   - name: check-data-dir
      #     image: busybox
      #     imagePullPolicy: Always
      #     command:
      #       - /bin/sh
      #       - -c
      #       - |
      #         echo "=== Checking /var/lib/postgresql/data directory ==="
      #         ls -la /var/lib/postgresql/data/
      #         echo "=== Directory size ==="
      #         du -sh /var/lib/postgresql/data/
      #         echo "=== Subdirectories and sizes ==="
      #         du -sh /var/lib/postgresql/data/*/ 2>/dev/null || echo "No subdirectories found"
      #         echo "=== File count ==="
      #         find /var/lib/postgresql/data -type f | wc -l
      #         echo "=== Done checking ==="
      #     volumeMounts:
      #       - name: pgdata
      #         mountPath: /var/lib/postgresql/data
      containers:
        - name: immich-postgres
          image: "ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
          resources:
            requests:
              memory: "1Gi"
              cpu: "500m"
            limits:
              memory: "2Gi"
              cpu: "1000m"
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: pvc-iscsi-immich-database

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: immich-server
  labels:
    app: immich-server
spec:
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-server
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      runtimeClassName: nvidia
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/hostname
                operator: In
                values:
                - gpu-node-1
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: immich-database
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        fsGroup: 2000
      serviceAccountName: default
      dnsPolicy: ClusterFirst
      initContainers:
        - name: postgresql-isready
          image: "ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0"
          imagePullPolicy: Always
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_USERNAME
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
          command:
            - /bin/sh
            - -c
            - until pg_isready -U "${POSTGRES_USER}" -d "dbname=${POSTGRES_DB}"
              -h immich-database -p 5432 ; do sleep 2 ; done
      containers:
        - name: immich-server
          image: "ghcr.io/immich-app/immich-server:release"
          imagePullPolicy: Always
          securityContext:
            runAsUser: 1000
          ports:
            - name: http
              containerPort: 2283
              protocol: TCP
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
            - name: NVIDIA_DRIVER_CAPABILITIES
              value: "compute,utility,video"
            - name: NVIDIA_VISIBLE_DEVICES
              value: "all"
          envFrom:
            - configMapRef:
                name: immich-env
                optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: immich-config
              mountPath: /opt/immich
            - name: library
              mountPath: /usr/src/app/upload
            - name: synology
              mountPath: /synology/media
            - name: nvidia-libraries
              mountPath: /usr/lib/x86_64-linux-gnu/libcuda.so.1
              subPath: libcuda.so.1
            - name: nvidia-libraries
              mountPath: /usr/lib/x86_64-linux-gnu/libnvidia-ml.so.1
              subPath: libnvidia-ml.so.1
          resources:
            requests:
              memory: "1Gi"
              cpu: "2000m"
              nvidia.com/gpu: 1
            limits:
              memory: "3Gi"
              cpu: "2000m"
              nvidia.com/gpu: 1
      volumes:
        - name: immich-config
          configMap:
            name: immich-config
        - name: library
          persistentVolumeClaim:
            claimName: pvc-nfs-immich-lb
        - name: synology
          persistentVolumeClaim:
            claimName: pvc-nfs-synology-library
        - name: nvidia-libraries
          hostPath:
            path: /usr/lib/x86_64-linux-gnu
            type: Directory

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: immich-machine-learning
  labels:
    app: immich-machine-learning
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-machine-learning
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      affinity:
        # nodeAffinity:
        #   requiredDuringSchedulingIgnoredDuringExecution:
        #     nodeSelectorTerms:
        #     - matchExpressions:
        #       - key: kubernetes.io/hostname
        #         operator: In
        #         values:
        #         - gpu-node-1
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: immich-database
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        fsGroup: 2000
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-machine-learning
          image: "ghcr.io/immich-app/immich-machine-learning:release"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3003
              protocol: TCP
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
            - name: TRANSFORMERS_CACHE
              value: /cache
            # - name: CUDA_VISIBLE_DEVICES
            #   value: "0"
            # - name: NODE_OPTIONS
            #   value: "--max-old-space-size=4096"
            # - name: NVIDIA_VISIBLE_DEVICES
            #   value: all
            # - name: NVIDIA_DRIVER_CAPABILITIES
            #   value: compute,utility,video
          envFrom:
            - configMapRef:
                name: immich-env
                optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: cache
              mountPath: /cache
          resources:
            requests:
              memory: "1Gi"
              cpu: "1000m"
              # nvidia.com/gpu: 1   # Request 1 GPU
            limits:
              memory: "2Gi"
              cpu: "2000m"
              # nvidia.com/gpu: 1   # Request 1 GPU
      volumes:
        - name: cache
          emptyDir: {}

---
kind: Service
apiVersion: v1
metadata:
  name: immich-database
  labels:
    app: immich-database
spec:
  type: ClusterIP
  selector:
    app: immich-database
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: 5432

---
kind: Service
apiVersion: v1
metadata:
  name: immich-machine-learning
  labels:
    app: immich-machine-learning
spec:
  type: ClusterIP
  selector:
    app: immich-machine-learning
  ports:
    - port: 3003
      targetPort: 3003
      protocol: TCP

---
kind: Service
apiVersion: v1
metadata:
  name: immich-server
  labels:
    app: immich-server
spec:
  type: ClusterIP
  selector:
    app: immich-server
  ports:
    - name: http
      port: 2283
      targetPort: http
      protocol: TCP

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: immich-private
  labels:
    app: immich
  annotations:
    traefik.ingress.kubernetes.io/router.entrypoints: "websecure"
    traefik.ingress.kubernetes.io/router.tls: "true"
    traefik.ingress.kubernetes.io/max-body-size: "20480m"
spec:
  rules:
    - host: "immich.j3laserna.me"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: immich-server
                port:
                  name: http
  tls:
    - hosts:
        - "immich.j3laserna.me"
      secretName: wildcard-j3laserna-me-tls
