---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-immich-db
  labels:
    app: immich-database
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-immich-db
    volumeAttributes:
      portal: truenas-master.lan.stamx.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:immich-database
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-immich-library
  labels:
    app: immich
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 600Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-immich-library
    volumeAttributes:
      server: truenas-master.lan.stamx.nl
      share: /mnt/ssd/containers/k8s/immich-media
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-immich-db
  labels:
    app: immich-database
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-iscsi-immich-db

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-immich-library
  labels:
    app: immich
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 600Gi
  volumeName: pv-nfs-immich-library

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: immich-secret-env
  namespace: tools
  labels:
    app: immich
spec:
  encryptedData:
    DB_PASSWORD: AgAzGgjaCENhVYjhsQMCxyDdpzS7IyQ8jtPHtwKZuw+4zxAEl3E200MN0ZoXQHhCze0VU4amE3v79KYPSXDGPH2liGcusBHTRurNGJ0Y3TwhaiZjDcXqhRwOqD0uCPADHNeSdEbXNB+uytL7PLDoEromPQ2XEivpJtV/xHWS78ig3q1bp9d6p2LWx5goJfHKyCL8rY75ihJy3kpir/kk9e1jp19h2VGhLg5FnMutrgoTe6tOFW69JtBveOrCrj/E7hH5VJnsFJD+2uRv+Bd1AauZkFeZmxHHs1UeuNTXYr4sXdxFW5maRR+g/dIApfgeMyWnMaL5NQLXK6wjRSVqkjrPiCLXHEI2jVJGeR5zP8u8c6rkj0kR3DIsA41OssJKw6KQxCbVlheUYbUgZJZRatqVanEKy8Vg9+uCtrAyGRUDJDC4w9fgZ4tvDrw+EtrsXMxTuZoCtoQkMeXEuQmc/YdBDE8hZFGMy3Hozzoqs84/D3RL4D6i9K8mrPb36y19SAv9tjqb6UTBwzwu2+Uxn77l4z/iQ8FGFzVZOGc4AhIKP9Oif14Nebsw4OlBbcDU96wHbBMvxfaG9gfAcMj3zSx5D+omzRMWupRnNOJg0IjlHFdQhGcz9RP6dTOv0uANuKldhZ9/3tOAaXDqI6a/djm5HdCrCu4Rg+5krayRLkimdQctsEUzPCuZQI3xXgKQtFc+oh6PIJBXVvk=
  template:
    type: Opaque
    metadata:
      labels:
        app: immich
      name: immich-secret-env
      namespace: tools

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: immich-env
  labels:
    app: immich
data:
  DB_DATABASE_NAME: "immich"
  DB_HOSTNAME: "immich-database"
  DB_USERNAME: "immich"
  IMMICH_MACHINE_LEARNING_URL: "http://immich-machine-learning:3003"
  REDIS_HOSTNAME: "redis-hl.tools.svc.cluster.local"
  REDIS_PORT: "6379"
  REDIS_DBINDEX: "0"
  REDIS_PASSWORD: ""
  DISABLE_REVERSE_GEOCODING: "false"
  REVERSE_GEOCODING_PRECISION: "2"
  PUBLIC_LOGIN_PAGE_MESSAGE: ""
  PUID: "1000"
  PGID: "2000"
  IMMICH_CONFIG_FILE: "/opt/immich/immich-config.json"

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: immich-database
  labels:
    app: immich-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: immich-database
  template:
    metadata:
      labels:
        app: immich-database
    spec:
      containers:
        - name: immich-postgres
          image: "ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0"
          imagePullPolicy: Always
          ports:
            - containerPort: 5432
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_USERNAME
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
          volumeMounts:
            - name: pgdata
              mountPath: /var/lib/postgresql/data
          resources: {}
      volumes:
        - name: pgdata
          persistentVolumeClaim:
            claimName: pvc-iscsi-immich-db

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: immich-server
  labels:
    app: immich-server
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-server
  template:
    metadata:
      labels:
        app: immich-server
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: immich-database
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        fsGroup: 2000
      serviceAccountName: default
      dnsPolicy: ClusterFirst
      initContainers:
        - name: postgresql-isready
          image: "ghcr.io/immich-app/postgres:14-vectorchord0.3.0-pgvectors0.2.0"
          imagePullPolicy: Always
          env:
            - name: POSTGRES_USER
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_USERNAME
            - name: POSTGRES_DB
              valueFrom:
                configMapKeyRef:
                  name: immich-env
                  key: DB_DATABASE_NAME
          command:
            - /bin/sh
            - -c
            - until pg_isready -U "${POSTGRES_USER}" -d "dbname=${POSTGRES_DB}"
              -h immich-database -p 5432 ; do sleep 2 ; done
      containers:
        - name: immich-server
          image: "ghcr.io/immich-app/immich-server:release"
          imagePullPolicy: Always
          securityContext:
            runAsUser: 1000
          ports:
            - name: http
              containerPort: 2283
              protocol: TCP
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
          envFrom:
            - configMapRef:
                name: immich-env
                optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 30
            httpGet:
              path: /api/server/ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: immich-config
              mountPath: /opt/immich
            - name: library
              mountPath: /usr/src/app/upload
          resources: {}
      volumes:
        - name: immich-config
          configMap:
            name: immich-config
        - name: library
          persistentVolumeClaim:
            claimName: pvc-nfs-immich-library

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: immich-machine-learning
  labels:
    app: immich-machine-learning
spec:
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: immich-machine-learning
  template:
    metadata:
      labels:
        app: immich-machine-learning
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            - labelSelector:
                matchLabels:
                  app: immich-database
              topologyKey: "kubernetes.io/hostname"
      securityContext:
        fsGroup: 2000
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: immich-machine-learning
          image: "ghcr.io/immich-app/immich-machine-learning:release"
          imagePullPolicy: Always
          ports:
            - name: http
              containerPort: 3003
              protocol: TCP
          env:
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: immich-secret-env
                  key: DB_PASSWORD
            - name: TRANSFORMERS_CACHE
              value: /cache
          envFrom:
            - configMapRef:
                name: immich-env
                optional: false
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          startupProbe:
            failureThreshold: 60
            httpGet:
              path: /ping
              port: http
            initialDelaySeconds: 0
            periodSeconds: 10
            timeoutSeconds: 1
          volumeMounts:
            - name: cache
              mountPath: /cache
          resources: {}
      volumes:
        - name: cache
          emptyDir: {}

---
kind: Service
apiVersion: v1
metadata:
  name: immich-database
  labels:
    app: immich-database
spec:
  type: ClusterIP
  selector:
    app: immich-database
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: 5432

---
kind: Service
apiVersion: v1
metadata:
  name: immich-machine-learning
  labels:
    app: immich-machine-learning
spec:
  type: ClusterIP
  selector:
    app: immich-machine-learning
  ports:
    - port: 3003
      targetPort: 3003
      protocol: TCP

---
kind: Service
apiVersion: v1
metadata:
  name: immich-server
  labels:
    app: immich-server
spec:
  type: ClusterIP
  selector:
    app: immich-server
  ports:
    - name: http
      port: 2283
      targetPort: http
      protocol: TCP

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: immich-private
  labels:
    app: immich
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 20480m
spec:
  ingressClassName: nginx-private
  rules:
    - host: "photos.lan.stamx.nl"
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: immich-server
                port:
                  name: http
  # tls:
  #   - hosts:
  #       - "photos.lan.stamx.nl"
  #     secretName: tls-wildcard-lan-stamx-nl
