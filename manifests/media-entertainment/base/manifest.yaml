---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-nfs-media
  labels:
    app: plex
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 500Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-media
    volumeAttributes:
      server: truenas-master.lan.theautomation.nl
      share: /mnt/hdd/containers/k8s/plex-media
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-prowlarr-config
  labels:
    app: prowlarr
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-prowlarr-config
    volumeAttributes:
      portal: truenas-master.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:prowlarr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-bazarr-config
  labels:
    app: bazarr
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-bazarr-config
    volumeAttributes:
      portal: truenas-master.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:bazarr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-sonarr-config
  labels:
    app: sonarr
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: ext4
    volumeHandle: pv-iscsi-sonarr-config
    volumeAttributes:
      portal: truenas-master.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:sonarr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-radarr-config
  labels:
    app: radarr
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-radarr-config
    volumeAttributes:
      portal: truenas-master.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:radarr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-overseerr-config
  labels:
    app: overseerr
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-overseerr-config
    volumeAttributes:
      portal: truenas-master.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:overseerr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-media
  namespace: media
  labels:
    app: plex
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  volumeName: pv-nfs-media

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-prowlarr-config
  namespace: media
  labels:
    app: prowlarr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-iscsi-prowlarr-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-bazarr-config
  namespace: media
  labels:
    app: bazarr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pv-iscsi-bazarr-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-sonarr-config
  namespace: media
  labels:
    app: sonarr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  volumeName: pv-iscsi-sonarr-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-radarr-config
  namespace: media
  labels:
    app: radarr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pv-iscsi-radarr-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-overseerr-config
  namespace: media
  labels:
    app: overseerr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-iscsi-overseerr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: prowlarr
          image: "lscr.io/linuxserver/prowlarr:latest"
          imagePullPolicy: Always
          resources: {}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - containerPort: 9696
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: prowlarr-config
              mountPath: /config
      volumes:
        - name: prowlarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-prowlarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: bazarr
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: bazarr
          image: "lscr.io/linuxserver/bazarr:latest"
          imagePullPolicy: Always
          resources: {}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 6767
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: media
              mountPath: /data/media
            - name: bazarr-config
              mountPath: /config
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: bazarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-bazarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: sonarr
          image: "lscr.io/linuxserver/sonarr:latest"
          imagePullPolicy: Always
          resources: {}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 8989
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /usr/bin/env
                - bash
                - -c
                - curl --fail localhost:8989/api/v3/system/status?apiKey=`IFS=\>
                  && while read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo
                  $C; fi; done < /config/config.xml`
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8989
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 8989
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: downloads
              mountPath: /data/downloads
            - name: media
              mountPath: /data/media
            - name: sonarr-config
              mountPath: /config
      volumes:
        - name: downloads
          persistentVolumeClaim:
            claimName: pvc-nfs-downloads
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: sonarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-sonarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: radarr
          image: "lscr.io/linuxserver/radarr:latest"
          imagePullPolicy: Always
          resources: {}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 7878
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /usr/bin/env
                - bash
                - -c
                - curl --fail localhost:7878/api/v3/system/status?apiKey=`IFS=\>
                  && while read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo
                  $C; fi; done < /config/config.xml`
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 7878
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 7878
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: downloads
              mountPath: /data/downloads
            - name: media
              mountPath: /data/media
            - name: radarr-config
              mountPath: /config
      volumes:
        - name: downloads
          persistentVolumeClaim:
            claimName: pvc-nfs-downloads
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: radarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-radarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: overseerr
  namespace: media
  labels:
    app: overseerr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: overseerr
  template:
    metadata:
      labels:
        app: overseerr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: overseerr
          image: "lscr.io/linuxserver/overseerr:latest"
          imagePullPolicy: Always
          env:
            - name: LOG_LEVEL
              value: info
            - name: TZ
              value: Europe/Amsterdam
          ports:
            - name: http
              containerPort: 5055
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 5055
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 5055
            initialDelaySeconds: 5
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 5055
            initialDelaySeconds: 5
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - mountPath: /app/config
              name: overseerr-config
          resources: {}
      terminationGracePeriodSeconds: 30
      volumes:
        - name: overseerr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-overseerr-config

---
kind: Service
apiVersion: v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  selector:
    app: prowlarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 9696
      targetPort: 9696

---
kind: Service
apiVersion: v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  selector:
    app: bazarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 6767
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  selector:
    app: sonarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 8989
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  selector:
    app: radarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 7878
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: overseerr
  namespace: media
  labels:
    app: overseerr
spec:
  type: ClusterIP
  selector:
    app: overseerr
  ports:
    - name: http
      protocol: TCP
      port: 5055
      targetPort: http

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  ingressClassName: nginx-private
  rules:
    - host: prowlarr.lan.stamx.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: prowlarr
                port:
                  number: 9696
  tls:
    - hosts:
        - prowlarr.lan.stamx.nl
      secretName: tls-wildcard-lan-stamx-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  ingressClassName: nginx-private
  rules:
    - host: bazarr.lan.stamx.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: bazarr
                port:
                  number: 6767
  tls:
    - hosts:
        - bazarr.lan.stamx.nl
      secretName: tls-wildcard-lan-stamx-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  ingressClassName: nginx-private
  rules:
    - host: sonarr.lan.stamx.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: sonarr
                port:
                  number: 8989
  tls:
    - hosts:
        - sonarr.lan.stamx.nl
      secretName: tls-wildcard-lan-stamx-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  ingressClassName: nginx-private
  rules:
    - host: radarr.lan.stamx.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: radarr
                port:
                  number: 7878
  tls:
    - hosts:
        - radarr.lan.stamx.nl
      secretName: tls-wildcard-lan-stamx-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: overseerr
  namespace: media
  labels:
    app: overseerr
spec:
  ingressClassName: nginx-private
  rules:
    - host: overseerr.lan.stamx.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: overseerr
                port:
                  name: http
  tls:
    - hosts:
        - overseerr.lan.stamx.nl
      secretName: tls-wildcard-lan-stamx-nl
