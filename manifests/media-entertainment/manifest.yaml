---
kind: Secret
apiVersion: v1
metadata:
  name: plex-claim-token
  namespace: media
  labels:
    app.kubernetes.io/name: vaultwarden
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: vaultwarden
type: Opaque
stringData:
  token: claim-xxxxxxxxxxxxxxxxxxxxx

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-downloads
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 200Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-downloads
    volumeAttributes:
      server: storage-server-lagg.lan.theautomation.nl
      share: /mnt/r10_8tb/downloads/
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
apiVersion: v1
kind: PersistentVolume
metadata:
  name: pv-nfs-media
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 500Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-media
    volumeAttributes:
      server: storage-server-lagg.lan.theautomation.nl
      share: /mnt/r10_8tb/media/
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-plex-transcodes
  labels:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 200Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-plex-transcodes
    volumeAttributes:
      server: storage-server-lagg.lan.theautomation.nl
      share: /mnt/r10_8tb/k8s/plex-transcode
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-plex-config
  labels:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-plex-config
    volumeAttributes:
      portal: storage-server-lagg.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:plex-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-prowlarr-config
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-prowlarr-config
    volumeAttributes:
      portal: storage-server-lagg.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:prowlarr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-bazarr-config
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-bazarr-config
    volumeAttributes:
      portal: storage-server-lagg.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:bazarr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-sonarr-config
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 3Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: ext4
    volumeHandle: pv-iscsi-sonarr-config
    volumeAttributes:
      portal: storage-server-lagg.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:sonarr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-radarr-config
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 1Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-radarr-config
    volumeAttributes:
      portal: storage-server-lagg.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:radarr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-overseerr-config
  labels:
    app.kubernetes.io/name: overseerr
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-overseerr-config
    volumeAttributes:
      portal: storage-server-lagg.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:overseerr-config
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-downloads
  namespace: media
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 200Gi
  volumeName: pv-nfs-downloads

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-media
  namespace: media
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  volumeName: pv-nfs-media

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-plex-transcodes
  namespace: media
  labels:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 200Gi
  volumeName: pv-nfs-plex-transcodes

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-plex-config
  namespace: media
  labels:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-iscsi-plex-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-prowlarr-config
  namespace: media
  labels:
    app: prowlarr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-iscsi-prowlarr-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-bazarr-config
  namespace: media
  labels:
    app: bazarr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pv-iscsi-bazarr-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-sonarr-config
  namespace: media
  labels:
    app: sonarr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 3Gi
  volumeName: pv-iscsi-sonarr-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-radarr-config
  namespace: media
  labels:
    app: radarr
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pv-iscsi-radarr-config

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-iscsi-overseerr-config
  namespace: media
  labels:
    app.kubernetes.io/name: overseerr
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  storageClassName: freenas-iscsi-manual-csi
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  volumeName: pv-iscsi-overseerr-config

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: transmission-vpn-cred
  namespace: media
spec:
  encryptedData:
    OPENVPN_PASSWORD: AgDhcF2An3Lp/LyJPtSsDOkXl8KT1DOqeWN2qNQGXZeW36se9n54zx54YcpSwvshpWsb2lONsPDnK4hycYWOngmhRRIdeOmEbieOhl1ia/bxlqSrhy73dvQMN+N8nPFLanuEByjrIdb0V4SN+8k1nD9ChfSmtbNVNeYdGXagUXm1Raj23cYICARjO4MzwWF02UjJ+m6ZzgLBRA32bOw7HKKnsecuhsRZ2vtfz1I75NZSe2ZjuCWPTEKYsexofu9V1JieuuQWYB+iuc4W887xj+54Z6DRGzSUNNse/DJciT76mWjU3+bljGL2MEAIWsWc0B2duav05feLFueqxw5W+nwy48epxFhpE//sqFkD/C1nTS5bHiaQPk7O2VjM0RBU9qmiUAVHtmugzvgTki1NFrxKUOZjByN57XQ25tUzvi7sxdhYgKQi96ERmgJY1c6LSZhTYLTL3HSbNzmpuwOsvwUkSpperCGif6G+OgHsVPt+Jq3PbFG04kT1/5pCoFWzQHAT4sXzXh73N80JYvj/Fko33zo3I0eBnS+4nQ20Jwn/jSMxlmvL/NqDd2sDiaHpoPaMEgP19YRb1hiGcpel3nMmngeX9WzWqNJSWDmpYOgKdH+xfnR0wdSRuae5Df2ZXRaiMBRaZPzwABT0Yg6rcLyBhxcxbO2Xkkeiuz2wZLjoZvK0DpHjgZVM23b9WWEy9WuF46HNSZO1qpp2kNmvDmPnUcekgA2xACo=
    OPENVPN_USERNAME: AgApqotmd1kXCWBOrp7VRLvKHnhbFUOwi1+nOFlD+qt8PxrybaATsjy/KFDZx0TSgcSA49zL4BZ5lAto3kXloEU+jZ6e1mChP/J9Sx+ILZyK0DIz7IWL41av0smXORbbMaMGJA37VDx24M4+bHwPqWYM8JPX5Y6JE8lQeMX+nitYso0ZXVBg2/2LL3UO0yHihoRvwGzO+ByEuAwfcX7VfYSMQQZxrBI21YjcctYyuUnapgq1hU5s+eTHtgJiSqh8HrKZL744cyWVXneUkBX5xJ2NZyjDd4F2jC0AdNF8WvEW08SE0K3Ik1canRP+Qvl1kVHgVg/0RIKAAdgq9JS92tgocJKPSuG6IO1USaEEC65qQgpFkOcCZ/ijSMUJ2jtAFAd2lMtbDgZGKOeTDe4CdvsRLooycRDDxafZQASwoWFmv88EHIw3sxMYVUW2wwp74t03Ke+JThgpcA+ZrCYjdVQA7f1j5dffgvXyGNu2yLu1O2U6EcKY0IYsU4Gnsrg6J4O0ThqHpmEo+0iRVZ1GEuHoFthtpJBOxVi1zjfm/rWC77PCiS4/vOQM3qV2P6O1mePO7o2XXy2rxpekjM2RWrajMfhU8SxwSc2/eI74XXTka4e1HF6uQo92dtVSdhq8Ea2KS3tffNehkMCTJHT4SR/fPH68kmjNEWGfLU0WM5Z6ltI0ErCqj6wpGRDxph9UmixGIpNu0wH/MpIhY8EQIENuPD8qW11iTQQ=
  template:
    metadata:
      labels:
        app.kubernetes.io/name: transmission-vpn-cred
        app.kubernetes.io/component: transmission
        app.kubernetes.io/instance: production
        app.kubernetes.io/part-of: media-entertainment
      name: transmission-vpn-cred
      namespace: media
    type: Opaque

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: plex-config
  namespace: media
  labels:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
data:
  TZ: "Europe/Amsterdam"
  ADVERTISE_IP: "http://10.0.100.241:32400/"
  PLEX_UID: "1000"
  PLEX_GID: "1000"
  CHANGE_CONFIG_DIR_OWNERSHIP: "false"
  ALLOWED_NETWORKS: "10.0.100.0/24,10.0.10.0/24"

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: transmission-config
  namespace: media
  labels:
    app: transmission
data:
  LOCAL_NETWORK: 10.0.100.240/32, 10.0.10.0/24
  NORDVPN_CATEGORY: legacy_p2p
  NORDVPN_COUNTRY: NL
  NORDVPN_PROTOCOL: udp
  OPENVPN_OPTS: --inactive 3600 --ping 10 --ping-exit 60
  OPENVPN_PROVIDER: NORDVPN
  TRANSMISSION_DOWNLOAD_DIR: /data/completed
  TRANSMISSION_INCOMPLETE_DIR: /data/incomplete
  TRANSMISSION_WATCH_DIR: /data/watch
  TRANSMISSION_DOWNLOAD_QUEUE_SIZE: "4"
  TZ: Europe/Amsterdam
  WEBPROXY_ENABLED: "false"
  CREATE_TUN_DEVICE: "true"
  HEALTH_CHECK_HOST: "google.com"

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: plex
  namespace: media
  labels:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: plex
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: production
      app.kubernetes.io/part-of: media-entertainment
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: plex
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: production
        app.kubernetes.io/part-of: media-entertainment
      namespace: media
    spec:
      containers:
        - name: plex
          image: plexinc/pms-docker
          resources:
            requests:
              memory: "4Gi"
              cpu: "1"
              ephemeral-storage: "2Gi"
            limits:
              memory: "8Gi"
              cpu: "2"
              ephemeral-storage: "4Gi"
          ports:
            # https://support.plex.tv/articles/201543147-what-network-ports-do-i-need-to-allow-through-my-firewall/
            - containerPort: 32400
              name: pms
              protocol: TCP
            - containerPort: 1900
              name: dnla-udp
              protocol: UDP
            - containerPort: 32469
              name: dnla-tcp
              protocol: TCP
            - containerPort: 3005
              name: home-theatre
              protocol: TCP
            - containerPort: 5353
              name: discovery
              protocol: TCP
            - containerPort: 8324
              name: roku
              protocol: TCP
            - containerPort: 32410
              protocol: UDP
            - containerPort: 32412
              protocol: UDP
            - containerPort: 32413
              protocol: UDP
            - containerPort: 32414
              protocol: UDP
          envFrom:
            - configMapRef:
                name: plex-config
          env:
            - name: PLEX_CLAIM
              valueFrom:
                secretKeyRef:
                  name: plex-claim-token
                  key: token
          volumeMounts:
            - mountPath: /config
              name: config
            - mountPath: /transcode
              name: transcode
            - mountPath: /data
              name: media
      dnsPolicy: ClusterFirst
      dnsConfig:
        nameservers:
          - 10.0.100.1
      volumes:
        - name: config
          persistentVolumeClaim:
            claimName: pvc-iscsi-plex-config
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: transcode
          persistentVolumeClaim:
            claimName: pvc-nfs-plex-transcodes

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: transmission
  namespace: media
  labels:
    app: transmission
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  selector:
    matchLabels:
      app: transmission
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: transmission
    spec:
      containers:
        - name: transmission
          image: "haugene/transmission-openvpn:latest"
          envFrom:
            - configMapRef:
                name: transmission-config
                optional: false
            - secretRef:
                name: transmission-vpn-cred
                optional: false
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 2
            successThreshold: 1
            tcpSocket:
              port: 9091
            timeoutSeconds: 2
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 10
            periodSeconds: 2
            successThreshold: 2
            tcpSocket:
              port: 9091
            timeoutSeconds: 2
          securityContext:
            allowPrivilegeEscalation: true
            capabilities:
              add:
                - NET_ADMIN
            privileged: true
          volumeMounts:
            - mountPath: /data/
              name: transmission-data
          resources: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: transmission-data
          persistentVolumeClaim:
            claimName: pvc-nfs-downloads

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: prowlarr
  template:
    metadata:
      labels:
        app: prowlarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: prowlarr
          image: "linuxserver/prowlarr:nightly"
          resources: {}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - containerPort: 9696
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 9696
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: prowlarr-config
              mountPath: /config
      volumes:
        - name: prowlarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-prowlarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: bazarr
  template:
    metadata:
      labels:
        app: bazarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: bazarr
          image: "linuxserver/bazarr:amd64-latest"
          imagePullPolicy: Always
          resources: {}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 6767
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 6767
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: media
              mountPath: /data/media
            - name: bazarr-config
              mountPath: /config
      volumes:
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: bazarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-bazarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: sonarr
  template:
    metadata:
      labels:
        app: sonarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: sonarr
          image: "linuxserver/sonarr:amd64-latest"
          imagePullPolicy: Always
          resources: {}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 8989
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /usr/bin/env
                - bash
                - -c
                - curl --fail localhost:8989/api/v3/system/status?apiKey=`IFS=\>
                  && while read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo
                  $C; fi; done < /config/config.xml`
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8989
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 8989
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: downloads
              mountPath: /data/downloads
            - name: media
              mountPath: /data/media
            - name: sonarr-config
              mountPath: /config
      volumes:
        - name: downloads
          persistentVolumeClaim:
            claimName: pvc-nfs-downloads
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: sonarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-sonarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: radarr
  template:
    metadata:
      labels:
        app: radarr
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: radarr
          image: "linuxserver/radarr:amd64-latest"
          imagePullPolicy: Always
          resources: {}
          env:
            - name: PUID
              value: "1000"
            - name: PGID
              value: "1000"
            - name: "TZ"
              value: "Europe/Amsterdam"
          ports:
            - name: http
              containerPort: 7878
              protocol: TCP
          livenessProbe:
            exec:
              command:
                - /usr/bin/env
                - bash
                - -c
                - curl --fail localhost:7878/api/v3/system/status?apiKey=`IFS=\>
                  && while read -d \< E C; do if [[ $E = "ApiKey" ]]; then echo
                  $C; fi; done < /config/config.xml`
            failureThreshold: 5
            initialDelaySeconds: 60
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 7878
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 7878
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - name: downloads
              mountPath: /data/downloads
            - name: media
              mountPath: /data/media
            - name: radarr-config
              mountPath: /config
      volumes:
        - name: downloads
          persistentVolumeClaim:
            claimName: pvc-nfs-downloads
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-media
        - name: radarr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-radarr-config

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: overseerr
  namespace: media
  labels:
    app.kubernetes.io/name: overseerr
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app.kubernetes.io/name: overseerr
      app.kubernetes.io/component: server
      app.kubernetes.io/instance: production
      app.kubernetes.io/part-of: media-entertainment
  template:
    metadata:
      labels:
        app.kubernetes.io/name: overseerr
        app.kubernetes.io/component: server
        app.kubernetes.io/instance: production
        app.kubernetes.io/part-of: media-entertainment
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      containers:
        - name: overseerr
          image: "sctx/overseerr:latest"
          imagePullPolicy: IfNotPresent
          env:
            - name: LOG_LEVEL
              value: info
            - name: TZ
              value: Europe/Amsterdam
          ports:
            - name: http
              containerPort: 5055
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 5055
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 5055
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 5055
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          volumeMounts:
            - mountPath: /app/config
              name: overseerr-config
          resources: {}
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
        - name: overseerr-config
          persistentVolumeClaim:
            claimName: pvc-iscsi-overseerr-config

---
kind: Service
apiVersion: v1
metadata:
  name: transmission
  namespace: media
  labels:
    app: transmission
spec:
  selector:
    app: transmission
  type: ClusterIP
  ports:
    - port: 9091
      protocol: TCP
      targetPort: 9091
  sessionAffinity: None

---
kind: Service
apiVersion: v1
metadata:
  name: plex-service
  namespace: media
  labels:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  type: LoadBalancer
  loadBalancerIP: 10.0.100.241
  externalTrafficPolicy: Local
  ports:
    - name: pms
      port: 32400
      protocol: TCP
      targetPort: pms
    - name: home-theatre
      port: 3005
      protocol: TCP
      targetPort: home-theatre
    - name: discovery
      port: 5353
      protocol: TCP
      targetPort: discovery
    - name: roku
      port: 8324
      protocol: TCP
      targetPort: roku
    - name: dnla-tcp
      port: 32469
      protocol: TCP
      targetPort: dnla-tcp
    - name: dnla-udp
      port: 1900
      protocol: UDP
      targetPort: dnla-udp
    - name: gdm32410
      port: 32410
      protocol: UDP
      targetPort: 32410
    - name: gdm32412
      port: 32412
      protocol: UDP
      targetPort: 32412
    - name: gdm32413
      port: 32413
      protocol: UDP
      targetPort: 32413
    - name: gdm32414
      port: 32414
      protocol: UDP
      targetPort: 32414
  selector:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
  sessionAffinity: None

---
kind: Service
apiVersion: v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  selector:
    app: prowlarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 9696
      targetPort: 9696

---
kind: Service
apiVersion: v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  selector:
    app: bazarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 6767
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  selector:
    app: sonarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 8989
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  selector:
    app: radarr
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 7878
      targetPort: http

---
kind: Service
apiVersion: v1
metadata:
  name: overseerr
  namespace: media
  labels:
    app.kubernetes.io/name: overseerr
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  type: ClusterIP
  selector:
    app.kubernetes.io/name: overseerr
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
  ports:
    - name: http
      protocol: TCP
      port: 5055
      targetPort: http

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: transmission
  namespace: media
  labels:
    app: transmission
spec:
  ingressClassName: nginx-private
  rules:
    - host: transmission.lan.theautomation.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: transmission
                port:
                  number: 9091
  tls:
    - hosts:
        - transmission.lan.theautomation.nl
      secretName: tls-wildcard-lan-theautomation-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: plex-internal-ingress
  namespace: media
  labels:
    app.kubernetes.io/name: plex
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  ingressClassName: nginx-private
  rules:
    - host: plex.lan.theautomation.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: plex-service
                port:
                  number: 32400
  tls:
    - hosts:
        - plex.lan.theautomation.nl
      secretName: tls-wildcard-lan-theautomation-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: prowlarr
  namespace: media
  labels:
    app: prowlarr
spec:
  ingressClassName: nginx-private
  rules:
    - host: prowlarr.lan.theautomation.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: prowlarr
                port:
                  number: 9696
  tls:
    - hosts:
        - prowlarr.lan.theautomation.nl
      secretName: tls-wildcard-lan-theautomation-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: bazarr
  namespace: media
  labels:
    app: bazarr
spec:
  ingressClassName: nginx-private
  rules:
    - host: bazarr.lan.theautomation.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: bazarr
                port:
                  number: 6767
  tls:
    - hosts:
        - bazarr.lan.theautomation.nl
      secretName: tls-wildcard-lan-theautomation-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: sonarr
  namespace: media
  labels:
    app: sonarr
spec:
  ingressClassName: nginx-private
  rules:
    - host: sonarr.lan.theautomation.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: sonarr
                port:
                  number: 8989
  tls:
    - hosts:
        - sonarr.lan.theautomation.nl
      secretName: tls-wildcard-lan-theautomation-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: radarr
  namespace: media
  labels:
    app: radarr
spec:
  ingressClassName: nginx-private
  rules:
    - host: radarr.lan.theautomation.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: radarr
                port:
                  number: 7878
  tls:
    - hosts:
        - radarr.lan.theautomation.nl
      secretName: tls-wildcard-lan-theautomation-nl

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: overseerr
  namespace: media
  labels:
    app.kubernetes.io/name: overseerr
    app.kubernetes.io/component: server
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: media-entertainment
spec:
  ingressClassName: nginx-private
  rules:
    - host: overseerr.lan.theautomation.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: overseerr
                port:
                  name: http
  tls:
    - hosts:
        - overseerr.lan.theautomation.nl
      secretName: tls-wildcard-lan-theautomation-nl
