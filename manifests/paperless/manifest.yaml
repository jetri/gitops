---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-iscsi-paperless-db
  labels:
    app: paperless-db
spec:
  storageClassName: "freenas-iscsi-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteOnce
  persistentVolumeReclaimPolicy: Retain
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: xfs
    volumeHandle: pv-iscsi-paperless-db
    volumeAttributes:
      portal: storage-server-lagg.lan.theautomation.nl:3260
      iqn: iqn.2005-10.org.freenas.ctl:paperless-db
      lun: "0"
      node_attach_driver: iscsi
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-paperless-consume
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-paperless-consume
    volumeAttributes:
      server: storage-server-lagg.lan.theautomation.nl
      share: /mnt/r10_8tb/shared/paperless-consume
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-paperless-data
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-paperless-data
    volumeAttributes:
      server: storage-server-lagg.lan.theautomation.nl
      share: /mnt/r01_1tb/k8s/paperless-data
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-paperless-export
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-paperless-export
    volumeAttributes:
      server: storage-server-lagg.lan.theautomation.nl
      share: /mnt/r01_1tb/k8s/paperless-export
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-paperless-media
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 10Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-paperless-media
    volumeAttributes:
      server: storage-server-lagg.lan.theautomation.nl
      share: /mnt/r01_1tb/k8s/paperless-media
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs-paperless-backups
  labels:
    app.kubernetes.io/name: backups
    app.kubernetes.io/component: cronjob
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: paperless
spec:
  storageClassName: "freenas-nfs-manual-csi"
  capacity:
    storage: 500Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  mountOptions:
    - nfsvers=4
    - nolock
    - noatime
  csi:
    driver: org.democratic-csi.node-manual
    readOnly: false
    fsType: nfs
    volumeHandle: pv-nfs-paperless-backups
    volumeAttributes:
      server: storage-server-lagg.lan.theautomation.nl
      share: /mnt/r10_8tb/backups
      node_attach_driver: nfs
      provisioner_driver: node-manual

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-paperless-consume
  namespace: tools
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-nfs-paperless-consume

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-paperless-data
  namespace: tools
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-nfs-paperless-data

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-paperless-export
  namespace: tools
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-nfs-paperless-export

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-paperless-media
  namespace: tools
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 10Gi
  volumeName: pv-nfs-paperless-media

---
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: pvc-nfs-paperless-backups
  namespace: tools
  labels:
    app.kubernetes.io/name: backups
    app.kubernetes.io/component: cronjob
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: paperless
spec:
  storageClassName: freenas-nfs-manual-csi
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 500Gi
  volumeName: pv-nfs-paperless-backups

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: paperless-postgresql
  namespace: tools
spec:
  encryptedData:
    postgres-password: AgCaznYATyTFFUCbfEB1PqW9zh6Xk3CHyzx7kFqaHu+/3LLbjXTzTWdNxkeo2VMMxlhEcVrwH8NX8NJVp5PtRPWsvf3Jd53Dix1QZ72J0hT6bj8evQnmEvz2U4yR4XZV7qhjQU+By7UcsuE5Sjd/m5GWoULLARPi5fswnZOCN5rY2wxpjnf2UdGYOjBucU1FwZEcG0VLdo6Mg0QNZg2D//5ULyw5vfwdwBy9BPmg2Qiie44VDBRnC9LK7UTbJ/jmZTB9lzC3j6yakWxzXVvCZzYomd6fBxGedkzF+4unLJic5WH2WWSMp2znwXID4V5kK4cTb+xVpN+2woat08FaW3oGDGixwnWBY0Wv6AWWluaVMzscQvdw1IJa+VOzkr5UJ9uqZCLQTA9e9Mib9sxR0zcbmu1QxGn27kQgSPLl9vGXBBu6kl53+X7MpH46GW5Bx3nhqUln4Kxm3ydvwaf1eJfANPev1bJ6YdE47T4rEa8dePZegCOtlxuSoOTTc69hguuMKyuDj3+un27VblULjMmuZu7qFxalUSc1pZOfxjc68Et5OvuzC5YUFuvtvsF6CTYGI12dXqg+rRqBI9ACiVpR6Xm1w5Vy+nbRzCvksoCryiqtbyuTVmzJ7IkO7t6MOBJ5E6YUItDQibe5l0LWybodfPhj+UFm6oPSx4C2cJ2rwwb6S8yB+8bOGB4U9iMvku4ZUyCy+n6P/yQdoVfOWg==
  template:
    metadata:
      labels:
        app: paperless-postgresql
      name: paperless-postgresql
      namespace: tools
    type: Opaque

---
kind: SealedSecret
apiVersion: bitnami.com/v1alpha1
metadata:
  name: paperless-admin-password
  namespace: tools
spec:
  encryptedData:
    admin-password: AgA4ybCtOvoNFSR9uMfjJY0UwGQcT+ZQtqpcypdjYbkJxBXsjWQwG4KXRhBJ3lpYrWPy3zNkiiYCmIu/W5VqRT4edcgv2vwxT8Pwy2s4Vsn2ZHvgqKY8Nb+OPBIJylwsI+GVNH8AwqpjvT6z0yQNflIVZVzHcSMUwzhRKVObYSAIY7+lMjdIyY0slZJurQyVJuoTucv/QQ/yqSv4RWFUkXsw7XrWLHCEyIsJSExK2CE4C+rEK5TDBjxKesT05Ium5GdEaqIHeChZfED70MfDJnMemtdTPkKASa+7T0uSqyiAkV8J08BfUijc5b0hsgi87ZB451koRng2HrN3y1UGTJF+vGXx7hop7id2hKi4zxjmLkP+Uu9sved71UFEuHcByNCiVLG6uFPq4QQphBatVl2KxQ1wAzY2TNz/PHDDImD0e5xiEvYrdZMvymOgNs7sw1teWy1kJZd8Pnkd2a4jTzaHZ0CS3gC5txlRC1lpgWiO0WLp8VGVPxTuxrM5WJbMEJ2cgZ7e7E3lzOp2Z12ywOJ08alKceLFCmmYD83PsQ4oPFNQrl7R09IEzoX9F99ZkLgNcRERTOW7E5AlGbjEnw6tg33JAYwFjjA31ZYdRqH3TFIdwK4BjC5U/OK8AL/A7FJN2asyTO/S3X/1u/odFPlx9H6ADUbs2Qd+X40zfxsn1Hz3xx4s7ISI0QIJXhZW5KjJCHkwj5tvsv8P3xw4eQ==
  template:
    metadata:
      labels:
        app: paperless
      name: paperless-admin-password
      namespace: tools
    type: Opaque

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: paperless-backup-script-postgresql
  namespace: tools
  labels:
    app.kubernetes.io/name: backups
    app.kubernetes.io/component: cronjob
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: paperless
data:
  pg_backup.sh: |-
    #!/bin/bash

    DATE=$(date +%Y%m%d-%H%M)
    DEST="/mnt/backups/${APP_NAME}/database"
    FILENAME="${DATE}_${PG_DATABASE}.sql"
    ERROR_LOG="${DEST}/${FILENAME}.error.log"

    mkdir -p ${DEST}
    if PGPASSWORD="${PG_PASSWORD}" pg_dump --verbose --inserts --column-inserts --username="${PG_USERNAME}" --host="${PG_HOST}" --port="${PG_PORT}" "${PG_DATABASE}" > "${DEST}/${FILENAME}"; then
      echo "Database backup successful: ${DEST}/${FILENAME}"
    else
      echo "Error: Database backup failed" > "${ERROR_LOG}"
      exit 1
    fi

---
kind: StatefulSet
apiVersion: apps/v1
metadata:
  name: paperless-postgresql
  namespace: tools
  labels:
    app: paperless-postgresql
spec:
  replicas: 1
  persistentVolumeClaimRetentionPolicy:
    whenDeleted: Delete
  serviceName: paperless-postgresql-hl
  updateStrategy:
    rollingUpdate: {}
    type: RollingUpdate
  selector:
    matchLabels:
      app: paperless-postgresql
  template:
    metadata:
      name: paperless-postgresql
      labels:
        app: paperless-postgresql
    spec:
      serviceAccountName: default
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - podAffinityTerm:
                labelSelector:
                  matchLabels:
                    app: paperless-postgresql
                namespaces:
                  - tools
                topologyKey: kubernetes.io/hostname
              weight: 1
      securityContext:
        fsGroup: 1000
      hostNetwork: false
      hostIPC: false
      containers:
        - name: postgresql
          image: "bitnami/postgresql:13"
          imagePullPolicy: "IfNotPresent"
          securityContext:
            runAsUser: 1000
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
            - name: POSTGRESQL_ENABLE_TLS
              value: "no"
            - name: POSTGRESQL_LOG_HOSTNAME
              value: "false"
            - name: POSTGRESQL_LOG_CONNECTIONS
              value: "false"
            - name: POSTGRESQL_LOG_DISCONNECTIONS
              value: "false"
            - name: POSTGRESQL_PGAUDIT_LOG_CATALOG
              value: "off"
            - name: POSTGRESQL_CLIENT_MIN_MESSAGES
              value: "error"
            - name: POSTGRESQL_SHARED_PRELOAD_LIBRARIES
              value: "pgaudit"
            - name: POSTGRESQL_DATABASE
              value: "paperless"
            - name: POSTGRESQL_USERNAME
              value: "paperless"
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: paperless-postgresql
                  key: postgres-password
          ports:
            - containerPort: 5432
          livenessProbe:
            failureThreshold: 6
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "paperless" -h 127.0.0.1 -p 5432
          readinessProbe:
            failureThreshold: 6
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "paperless" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
          resources:
            limits: {}
            requests:
              cpu: 250m
              memory: 256Mi
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
  volumeClaimTemplates:
    - metadata:
        name: data
        labels:
          app: paperless-postgresql
      spec:
        selector:
          matchLabels:
            app: paperless-db
        accessModes:
          - "ReadWriteOnce"
        storageClassName: freenas-iscsi-manual-csi
        resources:
          requests:
            storage: "10Gi"

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: paperless
  namespace: tools
  labels:
    app: paperless
spec:
  revisionHistoryLimit: 3
  replicas: 1
  strategy:
    type: Recreate
  selector:
    matchLabels:
      app: paperless
  template:
    metadata:
      labels:
        app: paperless
    spec:
      serviceAccountName: default
      automountServiceAccountToken: true
      dnsPolicy: ClusterFirst
      enableServiceLinks: true
      securityContext:
        fsGroup: 1000
      initContainers:
        - name: postgresql-isready
          image: "bitnami/postgresql:13"
          command:
            - "sh"
            - "-c"
            - until pg_isready -h paperless-postgresql-hl -U paperless ; do
              sleep 2 ; done
      containers:
        - name: paperless
          image: "paperlessngx/paperless-ngx:latest"
          imagePullPolicy: Always
          env:
            - name: COMPOSE_PROJECT_NAME
              value: paperless
            - name: PAPERLESS_OCR_LANGUAGES
              value: nld
            - name: PAPERLESS_OCR_LANGUAGE
              value: nld
            - name: PAPERLESS_PORT
              value: "8000"
            - name: PAPERLESS_CONSUMER_POLLING
              value: "60"
            - name: PAPERLESS_FILENAME_FORMAT
              value: "{created_year}/{correspondent}/{title}"
            - name: PAPERLESS_TIME_ZONE
              value: "Europe/Amsterdam"
            - name: PAPERLESS_URL
              value: "https://paperless.lan.theautomation.nl"
            - name: USERMAP_GID
              value: "1000"
            - name: USERMAP_UID
              value: "1000"
            - name: PAPERLESS_ADMIN_USER
              value: admin
            - name: PAPERLESS_REDIS
              value: "redis://redis-hl.tools.svc.cluster.local:6379"
            - name: PAPERLESS_DBHOST
              value: "paperless-postgresql-hl"
            - name: PAPERLESS_DBPASS
              valueFrom:
                secretKeyRef:
                  name: paperless-postgresql
                  key: postgres-password
            - name: PAPERLESS_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: paperless-admin-password
                  key: admin-password
          ports:
            - containerPort: 8000
              protocol: TCP
          livenessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          readinessProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 0
            failureThreshold: 3
            timeoutSeconds: 1
            periodSeconds: 10
          startupProbe:
            tcpSocket:
              port: 8000
            initialDelaySeconds: 0
            failureThreshold: 30
            timeoutSeconds: 1
            periodSeconds: 5
          resources: {}
          volumeMounts:
            - name: consume
              mountPath: /usr/src/paperless/consume
            - name: data
              mountPath: /usr/src/paperless/data
            - name: export
              mountPath: /usr/src/paperless/export
            - name: media
              mountPath: /usr/src/paperless/media
      volumes:
        - name: consume
          persistentVolumeClaim:
            claimName: pvc-nfs-paperless-consume
        - name: data
          persistentVolumeClaim:
            claimName: pvc-nfs-paperless-data
        - name: export
          persistentVolumeClaim:
            claimName: pvc-nfs-paperless-export
        - name: media
          persistentVolumeClaim:
            claimName: pvc-nfs-paperless-media

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: paperless-db-backup
  namespace: tools
  labels:
    app.kubernetes.io/name: backups
    app.kubernetes.io/component: cronjob
    app.kubernetes.io/instance: production
    app.kubernetes.io/part-of: paperless
spec:
  schedule: "0 15 * * *"
  jobTemplate:
    spec:
      template:
        spec:
          securityContext:
            fsGroup: 1000
          containers:
            - name: postgres-backup
              image: "bitnami/postgresql:13"
              securityContext:
                runAsUser: 1000
              command:
                - "/tmp/pg_backup.sh"
              env:
                - name: APP_NAME
                  value: "paperless"
                - name: PG_DATABASE
                  value: "paperless"
                - name: PG_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      name: paperless-postgresql
                      key: postgres-password
                - name: PG_USERNAME
                  value: "paperless"
                - name: PG_HOST
                  value: "paperless-postgresql-hl"
                - name: PG_PORT
                  value: "5432"
              volumeMounts:
                - name: backups
                  mountPath: /mnt/backups
                - name: backup-script
                  mountPath: /tmp
              resources: {}
          volumes:
            - name: backups
              persistentVolumeClaim:
                claimName: pvc-nfs-paperless-backups
            - name: backup-script
              configMap:
                name: paperless-backup-script-postgresql
                defaultMode: 0755
          restartPolicy: Never

---
kind: Service
apiVersion: v1
metadata:
  name: paperless-postgresql-hl
  namespace: tools
  labels:
    app: paperless-postgresql
    service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
spec:
  selector:
    app: paperless-postgresql
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: 5432

---
kind: Service
apiVersion: v1
metadata:
  name: paperless
  namespace: tools
  labels:
    app: paperless
spec:
  selector:
    app: paperless
  type: ClusterIP
  ports:
    - name: http
      protocol: TCP
      port: 8000
      targetPort: 8000

---
kind: Ingress
apiVersion: networking.k8s.io/v1
metadata:
  name: paperless
  namespace: tools
  labels:
    app: paperless
  annotations:
    nginx.ingress.kubernetes.io/proxy-body-size: 128m
spec:
  ingressClassName: nginx-private
  rules:
    - host: paperless.lan.theautomation.nl
      http:
        paths:
          - path: "/"
            pathType: Prefix
            backend:
              service:
                name: paperless
                port:
                  number: 8000
  tls:
    - hosts:
        - paperless.lan.theautomation.nl
      secretName: tls-wildcard-lan-theautomation-nl
